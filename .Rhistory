air2<-append(airportData[[length(airportData)]],nested)
str(air2)
airportData[[length(airportData)]]$nodes
airportData[[length(airportData)]]["nodes"]
airportData[[length(airportData)]]["nodes"]<-nodes
airportData[[length(airportData)]]["nodes"]
airportData[[length(airportData)]]$nodes
str(airportData)
airportData[[length(airportData)]]$nodes<-nodes
airportData<-list()
airportData<-list()
airportData<-append(airportData,year)
airportData
airportData[[length(airportData)]]
airportData[[length(airportData)]]<-nodes
airportData
str(airportData)
airportData<-list()
airportData<-append(airportData,year)
airportData[[length(airportData)]]$nodes<-nodes
airportData[[length(airportData)]]$edges<-edges
str(airportData)
dirs<-list.dirs('UKAirportNetwork//data//output//')
# ignore first root output directory
dirs<-dirs[2:length(dirs)]
airportData<-list()
for(dir in dirs){
#year<-substr(dir,nchar(dir)-3,nchar(dir))
year<-substr(dirs[2],nchar(dirs[2])-3,nchar(dirs[2]))
nodes<-read.csv(paste(dir,"nodes.csv",sep="//"),sep=",")
edges<-read.csv(paste(dir,"edges.csv",sep="//"),sep=",")
nested<-list(nodes,edges)
names(nested)<-c("nodes","edges")
airportData<-append(airportData,year)
airportData[[length(airportData)]]$nodes<-nodes
airportData[[length(airportData)]]$edges<-edges
}
str(airportData)
names(airportData[[length(airportData)]])
names(airportData[[length(airportData)]])[1]<-year
names(airportData[[length(airportData)]])
library(shiny)
airportData<-list()
for(dir in dirs){
#year<-substr(dir,nchar(dir)-3,nchar(dir))
year<-substr(dirs[2],nchar(dirs[2])-3,nchar(dirs[2]))
nodes<-read.csv(paste(dir,"nodes.csv",sep="//"),sep=",")
edges<-read.csv(paste(dir,"edges.csv",sep="//"),sep=",")
airportData<-append(airportData,year)
names(airportData[[length(airportData)]])[1]<-year
airportData[[length(airportData)]]$nodes<-nodes
airportData[[length(airportData)]]$edges<-edges
}
str(airportData)
airportData<-list()
for(dir in dirs){
year<-substr(dir,nchar(dir)-3,nchar(dir))
#year<-substr(dirs[2],nchar(dirs[2])-3,nchar(dirs[2]))
nodes<-read.csv(paste(dir,"nodes.csv",sep="//"),sep=",")
edges<-read.csv(paste(dir,"edges.csv",sep="//"),sep=",")
airportData<-append(airportData,year)
names(airportData[[length(airportData)]])[1]<-year
airportData[[length(airportData)]]$nodes<-nodes
airportData[[length(airportData)]]$edges<-edges
}
dirs<-list.dirs('UKAirportNetwork//data//output//')
dirs
substr(dirs,4,6)
nchar(dirs)
substr(dirs,nchar(dirs)-3,nchar(dirs))
dirs<-list.dirs('UKAirportNetwork//data//output//')
# ignore first root output directory
dirs<-dirs[2:length(dirs)]
substr(dirs,nchar(dirs)-3,nchar(dirs))
nodes<-read.csv(paste(dir,"nodes.csv",sep="//"),sep=",")
edges<-read.csv(paste(dir,"edges.csv",sep="//"),sep=",")
dirs<-list.dirs('UKAirportNetwork//data//output//')
# ignore first root output directory
dirs<-dirs[2:length(dirs)]
years<-substr(dirs,nchar(dirs)-3,nchar(dirs))
years
?switch
library(shiny)
runApp()
getwd()
setwd(paste(getwd(),"/UKAirportNetwork",sep=""))
getwd()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
runApp()
runApp()
library(shiny)
runApp()
nodes<-read.csv("UKAirportNetwork//data//output//13_nodes.csv",sep=",")
edges<-read.csv("UKAirportNetwork//data//output//13_edges.csv",sep = ",")
getwd()
nodes<-read.csv("data//output//13_nodes.csv",sep=",")
edges<-read.csv("data//output//13_edges.csv",sep = ",")
library(shiny)
runApp()
runApp()
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
nodes<-read.csv("data//output//2013//nodes.csv",sep=",")
edges<-read.csv("data//output//2013//edges.csv",sep = ",")
runApp(launch.browser = T)
runApp(launch.browser = T)
files<-list.files(path = "UKAirportNetwork\\data\\input",pattern=".csv",full.names = T)
nodes<-""
nodes<-lapply(files,function(x){
airports<-read.csv(x)
# filter columns
airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name")]
# generate unique node list with ids
c(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
})
nodes
files
files<-list.files(path = "UKAirportNetwork\\data\\input",pattern=".csv",full.names = T)
files
files<-list.files(path = "data\\input",pattern=".csv",full.names = T)
files
nodes<-""
# get all airport names for manual country assignment
nodes<-lapply(files,function(x){
airports<-read.csv(x)
# filter columns
airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name")]
# generate unique node list with ids
c(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
})
nodes
airport_groups<-read.csv("UKAirportNetwork//data//output//airports.csv",sep=",",header=T)
airport_groups<-read.csv("data//output//airports.csv",sep=",",header=T)
airport_groups
str(airport_groups)
files
x<-files[1]
airports<-read.csv(x)
airports
str(airports)
x
tryCatch(airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name","total_pax_tp")],
error=function(e){
print(e);
next;
})
airports.filter
head(airports.filter)
nodes<-data.frame(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
nodes$country<-apply(nodes,1,function(x) airport_groups[which(airport_groups[,c("X")] %in% x["name"]),c("X.1")])
str(nodes)
edges<-airports.filter
edges$apt1_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[1]))
edges$apt2_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[2]))
str(edges)
edges$apt1_id<-edges$apt1_id-1
edges$apt2_id<-edges$apt2_id-1
str(edges)
edges$total_pax_tp<-edges$total_pax_tp/10000
str(edges)
write.table(edges,paste("UKAirportNetwork//data//output",year,"edges.csv",sep="//"),sep=",")
ind<-regexpr("(\\d{4})",x)[1]
year<-substr(x,ind,ind+3)
write.table(edges,paste("UKAirportNetwork//data//output",year,"edges.csv",sep="//"),sep=",")
write.table(edges,paste("data//output",year,"edges.csv",sep="//"),sep=",")
str(edges)
edges
write.table(edges,paste("data//output",year,"edges.csv",sep="//"),sep=",",row.names=F)
write.table(nodes,paste("data//output",year,"nodes.csv",sep="//"),sep=",",col.names = NA)
for(x in files){
# Load data
airports<-read.csv(x)
# filter columns
tryCatch(airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name","total_pax_tp")],
error=function(e){
print(e);
next;
})
# generate unique node list with ids
nodes<-data.frame(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
nodes$country<-apply(nodes,1,function(x) airport_groups[which(airport_groups[,c("X")] %in% x["name"]),c("X.1")])
edges<-airports.filter
edges$apt1_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[1]))
edges$apt2_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[2]))
# zero-index the edge id's
edges$apt1_id<-edges$apt1_id-1
edges$apt2_id<-edges$apt2_id-1
# normalise passenger number counts to prevent excessively wide edges
edges$total_pax_tp<-edges$total_pax_tp/10000
# regex year from filename
ind<-regexpr("(\\d{4})",x)[1]
year<-substr(x,ind,ind+3)
if(!(paste("data//output",year,sep="//") %in% list.dirs("data//output/"))){
dir.create(paste("data//output",year,sep="//"))
}
write.table(nodes,paste("data//output",year,"nodes.csv",sep="//"),sep=",",col.names=NA)
write.table(edges,paste("data//output",year,"edges.csv",sep="//"),sep=",",col.names=NA)
}
runApp(launch.browser = T)
nodes<-read.csv("data//output//2013//nodes.csv",sep=",")
edges<-read.csv("data//output//2013//edges.csv",sep = ",")
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
#Group = "grp_name",
width = 400, height = 500,
opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
#Group = "grp_name",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
#Group = "grp_name",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
files<-list.files(path = "data\\input",pattern=".csv",full.names = T)
nodes<-""
# get all airport names for manual country assignment
nodes<-lapply(files,function(x){
airports<-read.csv(x)
# filter columns
airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name")]
# generate unique node list with ids
c(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
})
# filter by unique names, and save to file for manual country assignment in excel
all_airports<-unique(do.call(c,nodes))
#write.table(all_airports,file = "data//output//airports_names.csv",sep = ",")
# get manually assigned groups
airport_groups<-read.csv("data//output//airports.csv",sep=",",header=T)
for(x in files){
# Load data
airports<-read.csv(x)
# filter columns
tryCatch(airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name","total_pax_tp")],
error=function(e){
print(e);
next;
})
# generate unique node list with ids
nodes<-data.frame(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
nodes$country<-apply(nodes,1,function(x) airport_groups[which(airport_groups[,c("X")] %in% x["name"]),c("X.1")])
edges<-airports.filter
edges$apt1_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[1]))
edges$apt2_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[2]))
# zero-index the edge id's
edges$apt1_id<-edges$apt1_id-1
edges$apt2_id<-edges$apt2_id-1
# normalise passenger number counts to prevent excessively wide edges
edges$total_pax_tp<-edges$total_pax_tp/10000
# regex year from filename
ind<-regexpr("(\\d{4})",x)[1]
year<-substr(x,ind,ind+3)
if(!(paste("data//output",year,sep="//") %in% list.dirs("data//output/"))){
dir.create(paste("data//output",year,sep="//"))
}
write.table(nodes,paste("data//output",year,"nodes.csv",sep="//"),sep=",",col.names=NA)
write.table(edges,paste("data//output",year,"edges.csv",sep="//"),sep=",",col.names=NA)
}
files<-list.files(path = "data\\input",pattern=".csv",full.names = T)
nodes<-""
# get all airport names for manual country assignment
nodes<-lapply(files,function(x){
airports<-read.csv(x)
# filter columns
airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name")]
# generate unique node list with ids
c(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
})
# filter by unique names, and save to file for manual country assignment in excel
all_airports<-unique(do.call(c,nodes))
#write.table(all_airports,file = "data//output//airports_names.csv",sep = ",")
# get manually assigned groups
airport_groups<-read.csv("data//output//airports.csv",sep=",",header=T)
for(x in files){
# Load data
airports<-read.csv(x)
# filter columns
tryCatch(airports.filter<-airports[,c("apt1_apt_name","apt2_apt_name","total_pax_tp")],
error=function(e){
print(e);
next;
})
# generate unique node list with ids
nodes<-data.frame(name=unique(c(as.character(airports.filter[,1]),as.character(airports.filter[,2]))))
nodes$country<-apply(nodes,1,function(x) airport_groups[which(airport_groups[,c("X")] %in% x["name"]),c("X.1")])
edges<-airports.filter
edges$apt1_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[1]))
edges$apt2_id<-apply(airports.filter,1,function(x) which(nodes[,c("name")] %in% x[2]))
# zero-index the edge id's
edges$apt1_id<-edges$apt1_id-1
edges$apt2_id<-edges$apt2_id-1
# normalise passenger number counts to prevent excessively wide edges
edges$total_pax_tp<-edges$total_pax_tp/10000
# regex year from filename
ind<-regexpr("(\\d{4})",x)[1]
year<-substr(x,ind,ind+3)
if(!(paste("data//output",year,sep="//") %in% list.dirs("data//output/"))){
dir.create(paste("data//output",year,sep="//"))
}
write.table(nodes,paste("data//output",year,"nodes.csv",sep="//"),sep=",",col.names=NA)
write.table(edges,paste("data//output",year,"edges.csv",sep="//"),sep=",",col.names=NA)
}
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
#Group = "grp_name",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
nodes<-read.csv("data//output//2013//nodes.csv",sep=",")
edges<-read.csv("data//output//2013//edges.csv",sep = ",")
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
#Group = "grp_name",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
nodes
?d3ForceNetwork
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
#Value = "total_pax_tp",
NodeID = "name",
#Group = "grp_name",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
names(nodes)
names(edges)
nodes
edges
head(edges)
#edges[edges$apt2_apt_name=="GATWICK",]
edges[edges$apt2_apt_name=="GATWICK",]
edges[edges$apt2_apt_name %in% "GATWICK",]
edges$apt2_apt_name
unique(edges$apt2_apt_name)
head(edges)
head(edges,10)
head(edges,15)
head(edges,19)
head(edges,25)
unique(edges$apt2_apt_name)
edges[edges$apt2_apt_name %in% "HEATHROW",]
head(nodes)
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
Group = "country",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
d3ForceNetwork(Nodes = nodes,
Links = edges,
Source = "apt1_id", Target = "apt2_id",
Value = "total_pax_tp",
NodeID = "name",
Group = "country",
width = 400, height = 500,
#opacity = input$slider,
zoom = T,
standAlone = FALSE,
parentElement = '#networkPlot'
)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
edges<-read.csv(paste("UKAirportNetwork//data//output",year,"edges.csv",sep="//"),sep=",")
runApp(launch.browser = T)
edges<-read.csv(paste("data//output",year,"edges.csv",sep="//"),sep=",")
head(edges)
year
nodes<-read.csv(paste("data//output",year,"nodes.csv",sep="//"),sep=",")
nodes
head(nodes)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='polyphant', token='6CFBF44002FC1969409014C4604A75CC', secret='S0APGaI6I39sk0ZRYkakGqYaHn7bheQEJQTaAnhb')
library(shinyapps)
shinyapps::deployApp('C://Users//Chris//Documents//Data Science Files//UKAirportNetwork')
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
mean(glm.pred==Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
shinyapps::deployApp('C://Users//Chris//Documents//Data Science Files//UKAirportNetwork')
shinyapps::deployApp('C://Users//Chris//Documents//Data Science Files//UKAirportNetwork')
shinyapps::deployApp('C://Users//Chris//Documents//Data Science Files//UKAirportNetwork')
devtools::install_github('christophergandrud/networkD3')
library(networkD3)
install.packages(htmlwidgets)
install.packages("htmlwidgets")
devtools::install_github('ramnathv/htmlwidgets')
library(htmlwidgets)
devtools::install_github('christophergandrud/networkD3')
library(networkD3)
library(networkD3)
forceNetwork(Links = edges, Nodes = nodes, Source = "apt1_id",
Target = "apt2_id", Value = "total_pax_tp", NodeID = "name",
Group = "country", opacity = 0.9,
colourScale = "d3.scale.category20b()")
nodes<-readNodes()
readNodes <- reactive({
read.csv(paste("data//output",input$year,"nodes.csv",sep="//"),sep=",")
})
readEdges <- reactive({
read.csv(paste("data//output",input$year,"edges.csv",sep="//"),sep=",")
})
nodes<-readNodes()
edges<-readEdges()
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
runApp(launch.browser = T)
shinyapps::deployApp('C://Users//Chris//Documents//Data Science Files//UKAirportNetwork')
shinyapps::deployApp('C://Users//Chris//Documents//Data Science Files//UKAirportNetwork')
